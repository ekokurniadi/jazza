package formatter

import "jazza/entity"

type UserFormatter struct {
	ID                int     `json:"id"`
	UserName          string  `json:"user_name"`
	Password          string  `json:"password"`
	FirstName         string  `json:"first_name"`
	LastName          string  `json:"last_name"`
	PhoneNumber       string  `json:"phone_number"`
	Gender            string  `json:"gender"`
	BirthPlace        string  `json:"birth_place"`
	BirthDate         string  `json:"birth_date"`
	Religion          string  `json:"religion"`
	Province          string  `json:"province"`
	City              string  `json:"city"`
	Address           string  `json:"address"`
	Age               string  `json:"age"`
	Role              string  `json:"role"`
	ProfilePicture    string  `json:"profile_picture"`
	KtpID             string  `json:"ktp_id"`
	AccountBank       string  `json:"account_bank"`
	AccountBankNumber string  `json:"account_bank_number"`
	AccountBankName   string  `json:"account_bank_name"`
	Rating            float64 `json:"rating"`
	Skill             string  `json:"skill"`
	IsActive          int     `json:"is_active"`
}

func FormatUser(user entity.User) UserFormatter {
	userFormatter := UserFormatter{}
	userFormatter.ID = user.ID
	userFormatter.UserName = user.UserName
	userFormatter.Password = user.Password
	userFormatter.FirstName = user.FirstName
	userFormatter.LastName = user.LastName
	userFormatter.PhoneNumber = user.PhoneNumber
	userFormatter.Gender = user.Gender
	userFormatter.BirthPlace = user.BirthPlace
	userFormatter.BirthDate = user.BirthDate
	userFormatter.Religion = user.Religion
	userFormatter.Province = user.Province
	userFormatter.City = user.City
	userFormatter.Address = user.Address
	userFormatter.Age = user.Age
	userFormatter.Role = user.Role
	userFormatter.ProfilePicture = user.ProfilePicture
	userFormatter.KtpID = user.KtpID
	userFormatter.AccountBank = user.AccountBank
	userFormatter.AccountBankNumber = user.AccountBankNumber
	userFormatter.AccountBankName = user.AccountBankName
	userFormatter.Rating = user.Rating
	userFormatter.Skill = user.Skill
	userFormatter.IsActive = user.IsActive
	return userFormatter
}
func FormatUsers(users []entity.User) []UserFormatter {
	usersFormatter := []UserFormatter{}
	for _, user := range users {
		userFormatter := FormatUser(user)
		usersFormatter = append(usersFormatter, userFormatter)
	}
	return usersFormatter
}

//Generated by Micagen at 27 Juni 2022
